// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  block: (where?: BlockWhereInput) => Promise<boolean>;
  transaction: (where?: TransactionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  block: (where: BlockWhereUniqueInput) => BlockNullablePromise;
  blocks: (args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Block>;
  blocksConnection: (args?: {
    where?: BlockWhereInput;
    orderBy?: BlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlockConnectionPromise;
  transaction: (
    where: TransactionWhereUniqueInput
  ) => TransactionNullablePromise;
  transactions: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Transaction>;
  transactionsConnection: (args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TransactionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlock: (data: BlockCreateInput) => BlockPromise;
  updateBlock: (args: {
    data: BlockUpdateInput;
    where: BlockWhereUniqueInput;
  }) => BlockPromise;
  updateManyBlocks: (args: {
    data: BlockUpdateManyMutationInput;
    where?: BlockWhereInput;
  }) => BatchPayloadPromise;
  upsertBlock: (args: {
    where: BlockWhereUniqueInput;
    create: BlockCreateInput;
    update: BlockUpdateInput;
  }) => BlockPromise;
  deleteBlock: (where: BlockWhereUniqueInput) => BlockPromise;
  deleteManyBlocks: (where?: BlockWhereInput) => BatchPayloadPromise;
  createTransaction: (data: TransactionCreateInput) => TransactionPromise;
  updateTransaction: (args: {
    data: TransactionUpdateInput;
    where: TransactionWhereUniqueInput;
  }) => TransactionPromise;
  updateManyTransactions: (args: {
    data: TransactionUpdateManyMutationInput;
    where?: TransactionWhereInput;
  }) => BatchPayloadPromise;
  upsertTransaction: (args: {
    where: TransactionWhereUniqueInput;
    create: TransactionCreateInput;
    update: TransactionUpdateInput;
  }) => TransactionPromise;
  deleteTransaction: (where: TransactionWhereUniqueInput) => TransactionPromise;
  deleteManyTransactions: (
    where?: TransactionWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  block: (
    where?: BlockSubscriptionWhereInput
  ) => BlockSubscriptionPayloadSubscription;
  transaction: (
    where?: TransactionSubscriptionWhereInput
  ) => TransactionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "hash_ASC"
  | "hash_DESC"
  | "nonce_ASC"
  | "nonce_DESC"
  | "blockHash_ASC"
  | "blockHash_DESC"
  | "blockNumber_ASC"
  | "blockNumber_DESC"
  | "transactionIndex_ASC"
  | "transactionIndex_DESC"
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "value_ASC"
  | "value_DESC"
  | "gasPrice_ASC"
  | "gasPrice_DESC"
  | "gas_ASC"
  | "gas_DESC"
  | "input_ASC"
  | "input_DESC";

export type BlockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "hash_ASC"
  | "hash_DESC"
  | "parentHash_ASC"
  | "parentHash_DESC"
  | "baseFeePerGas_ASC"
  | "baseFeePerGas_DESC"
  | "nonce_ASC"
  | "nonce_DESC"
  | "sha3Uncles_ASC"
  | "sha3Uncles_DESC"
  | "logsBloom_ASC"
  | "logsBloom_DESC"
  | "transactionRoot_ASC"
  | "transactionRoot_DESC"
  | "stateRoot_ASC"
  | "stateRoot_DESC"
  | "miner_ASC"
  | "miner_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "totalDifficulty_ASC"
  | "totalDifficulty_DESC"
  | "extraData_ASC"
  | "extraData_DESC"
  | "size_ASC"
  | "size_DESC"
  | "gasLimit_ASC"
  | "gasLimit_DESC"
  | "gasUsed_ASC"
  | "gasUsed_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BlockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  hash?: Maybe<String>;
  parentHash?: Maybe<String>;
}>;

export interface TransactionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  nonce?: Maybe<Int>;
  nonce_not?: Maybe<Int>;
  nonce_in?: Maybe<Int[] | Int>;
  nonce_not_in?: Maybe<Int[] | Int>;
  nonce_lt?: Maybe<Int>;
  nonce_lte?: Maybe<Int>;
  nonce_gt?: Maybe<Int>;
  nonce_gte?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockHash_not?: Maybe<String>;
  blockHash_in?: Maybe<String[] | String>;
  blockHash_not_in?: Maybe<String[] | String>;
  blockHash_lt?: Maybe<String>;
  blockHash_lte?: Maybe<String>;
  blockHash_gt?: Maybe<String>;
  blockHash_gte?: Maybe<String>;
  blockHash_contains?: Maybe<String>;
  blockHash_not_contains?: Maybe<String>;
  blockHash_starts_with?: Maybe<String>;
  blockHash_not_starts_with?: Maybe<String>;
  blockHash_ends_with?: Maybe<String>;
  blockHash_not_ends_with?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  blockNumber_not?: Maybe<Int>;
  blockNumber_in?: Maybe<Int[] | Int>;
  blockNumber_not_in?: Maybe<Int[] | Int>;
  blockNumber_lt?: Maybe<Int>;
  blockNumber_lte?: Maybe<Int>;
  blockNumber_gt?: Maybe<Int>;
  blockNumber_gte?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  transactionIndex_not?: Maybe<Int>;
  transactionIndex_in?: Maybe<Int[] | Int>;
  transactionIndex_not_in?: Maybe<Int[] | Int>;
  transactionIndex_lt?: Maybe<Int>;
  transactionIndex_lte?: Maybe<Int>;
  transactionIndex_gt?: Maybe<Int>;
  transactionIndex_gte?: Maybe<Int>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gasPrice_not?: Maybe<String>;
  gasPrice_in?: Maybe<String[] | String>;
  gasPrice_not_in?: Maybe<String[] | String>;
  gasPrice_lt?: Maybe<String>;
  gasPrice_lte?: Maybe<String>;
  gasPrice_gt?: Maybe<String>;
  gasPrice_gte?: Maybe<String>;
  gasPrice_contains?: Maybe<String>;
  gasPrice_not_contains?: Maybe<String>;
  gasPrice_starts_with?: Maybe<String>;
  gasPrice_not_starts_with?: Maybe<String>;
  gasPrice_ends_with?: Maybe<String>;
  gasPrice_not_ends_with?: Maybe<String>;
  gas?: Maybe<Int>;
  gas_not?: Maybe<Int>;
  gas_in?: Maybe<Int[] | Int>;
  gas_not_in?: Maybe<Int[] | Int>;
  gas_lt?: Maybe<Int>;
  gas_lte?: Maybe<Int>;
  gas_gt?: Maybe<Int>;
  gas_gte?: Maybe<Int>;
  input?: Maybe<String>;
  input_not?: Maybe<String>;
  input_in?: Maybe<String[] | String>;
  input_not_in?: Maybe<String[] | String>;
  input_lt?: Maybe<String>;
  input_lte?: Maybe<String>;
  input_gt?: Maybe<String>;
  input_gte?: Maybe<String>;
  input_contains?: Maybe<String>;
  input_not_contains?: Maybe<String>;
  input_starts_with?: Maybe<String>;
  input_not_starts_with?: Maybe<String>;
  input_ends_with?: Maybe<String>;
  input_not_ends_with?: Maybe<String>;
  AND?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  OR?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
  NOT?: Maybe<TransactionWhereInput[] | TransactionWhereInput>;
}

export interface BlockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  parentHash?: Maybe<String>;
  parentHash_not?: Maybe<String>;
  parentHash_in?: Maybe<String[] | String>;
  parentHash_not_in?: Maybe<String[] | String>;
  parentHash_lt?: Maybe<String>;
  parentHash_lte?: Maybe<String>;
  parentHash_gt?: Maybe<String>;
  parentHash_gte?: Maybe<String>;
  parentHash_contains?: Maybe<String>;
  parentHash_not_contains?: Maybe<String>;
  parentHash_starts_with?: Maybe<String>;
  parentHash_not_starts_with?: Maybe<String>;
  parentHash_ends_with?: Maybe<String>;
  parentHash_not_ends_with?: Maybe<String>;
  baseFeePerGas?: Maybe<Int>;
  baseFeePerGas_not?: Maybe<Int>;
  baseFeePerGas_in?: Maybe<Int[] | Int>;
  baseFeePerGas_not_in?: Maybe<Int[] | Int>;
  baseFeePerGas_lt?: Maybe<Int>;
  baseFeePerGas_lte?: Maybe<Int>;
  baseFeePerGas_gt?: Maybe<Int>;
  baseFeePerGas_gte?: Maybe<Int>;
  nonce?: Maybe<String>;
  nonce_not?: Maybe<String>;
  nonce_in?: Maybe<String[] | String>;
  nonce_not_in?: Maybe<String[] | String>;
  nonce_lt?: Maybe<String>;
  nonce_lte?: Maybe<String>;
  nonce_gt?: Maybe<String>;
  nonce_gte?: Maybe<String>;
  nonce_contains?: Maybe<String>;
  nonce_not_contains?: Maybe<String>;
  nonce_starts_with?: Maybe<String>;
  nonce_not_starts_with?: Maybe<String>;
  nonce_ends_with?: Maybe<String>;
  nonce_not_ends_with?: Maybe<String>;
  sha3Uncles?: Maybe<String>;
  sha3Uncles_not?: Maybe<String>;
  sha3Uncles_in?: Maybe<String[] | String>;
  sha3Uncles_not_in?: Maybe<String[] | String>;
  sha3Uncles_lt?: Maybe<String>;
  sha3Uncles_lte?: Maybe<String>;
  sha3Uncles_gt?: Maybe<String>;
  sha3Uncles_gte?: Maybe<String>;
  sha3Uncles_contains?: Maybe<String>;
  sha3Uncles_not_contains?: Maybe<String>;
  sha3Uncles_starts_with?: Maybe<String>;
  sha3Uncles_not_starts_with?: Maybe<String>;
  sha3Uncles_ends_with?: Maybe<String>;
  sha3Uncles_not_ends_with?: Maybe<String>;
  logsBloom?: Maybe<String>;
  logsBloom_not?: Maybe<String>;
  logsBloom_in?: Maybe<String[] | String>;
  logsBloom_not_in?: Maybe<String[] | String>;
  logsBloom_lt?: Maybe<String>;
  logsBloom_lte?: Maybe<String>;
  logsBloom_gt?: Maybe<String>;
  logsBloom_gte?: Maybe<String>;
  logsBloom_contains?: Maybe<String>;
  logsBloom_not_contains?: Maybe<String>;
  logsBloom_starts_with?: Maybe<String>;
  logsBloom_not_starts_with?: Maybe<String>;
  logsBloom_ends_with?: Maybe<String>;
  logsBloom_not_ends_with?: Maybe<String>;
  transactionRoot?: Maybe<String>;
  transactionRoot_not?: Maybe<String>;
  transactionRoot_in?: Maybe<String[] | String>;
  transactionRoot_not_in?: Maybe<String[] | String>;
  transactionRoot_lt?: Maybe<String>;
  transactionRoot_lte?: Maybe<String>;
  transactionRoot_gt?: Maybe<String>;
  transactionRoot_gte?: Maybe<String>;
  transactionRoot_contains?: Maybe<String>;
  transactionRoot_not_contains?: Maybe<String>;
  transactionRoot_starts_with?: Maybe<String>;
  transactionRoot_not_starts_with?: Maybe<String>;
  transactionRoot_ends_with?: Maybe<String>;
  transactionRoot_not_ends_with?: Maybe<String>;
  stateRoot?: Maybe<String>;
  stateRoot_not?: Maybe<String>;
  stateRoot_in?: Maybe<String[] | String>;
  stateRoot_not_in?: Maybe<String[] | String>;
  stateRoot_lt?: Maybe<String>;
  stateRoot_lte?: Maybe<String>;
  stateRoot_gt?: Maybe<String>;
  stateRoot_gte?: Maybe<String>;
  stateRoot_contains?: Maybe<String>;
  stateRoot_not_contains?: Maybe<String>;
  stateRoot_starts_with?: Maybe<String>;
  stateRoot_not_starts_with?: Maybe<String>;
  stateRoot_ends_with?: Maybe<String>;
  stateRoot_not_ends_with?: Maybe<String>;
  miner?: Maybe<String>;
  miner_not?: Maybe<String>;
  miner_in?: Maybe<String[] | String>;
  miner_not_in?: Maybe<String[] | String>;
  miner_lt?: Maybe<String>;
  miner_lte?: Maybe<String>;
  miner_gt?: Maybe<String>;
  miner_gte?: Maybe<String>;
  miner_contains?: Maybe<String>;
  miner_not_contains?: Maybe<String>;
  miner_starts_with?: Maybe<String>;
  miner_not_starts_with?: Maybe<String>;
  miner_ends_with?: Maybe<String>;
  miner_not_ends_with?: Maybe<String>;
  difficulty?: Maybe<String>;
  difficulty_not?: Maybe<String>;
  difficulty_in?: Maybe<String[] | String>;
  difficulty_not_in?: Maybe<String[] | String>;
  difficulty_lt?: Maybe<String>;
  difficulty_lte?: Maybe<String>;
  difficulty_gt?: Maybe<String>;
  difficulty_gte?: Maybe<String>;
  difficulty_contains?: Maybe<String>;
  difficulty_not_contains?: Maybe<String>;
  difficulty_starts_with?: Maybe<String>;
  difficulty_not_starts_with?: Maybe<String>;
  difficulty_ends_with?: Maybe<String>;
  difficulty_not_ends_with?: Maybe<String>;
  totalDifficulty?: Maybe<String>;
  totalDifficulty_not?: Maybe<String>;
  totalDifficulty_in?: Maybe<String[] | String>;
  totalDifficulty_not_in?: Maybe<String[] | String>;
  totalDifficulty_lt?: Maybe<String>;
  totalDifficulty_lte?: Maybe<String>;
  totalDifficulty_gt?: Maybe<String>;
  totalDifficulty_gte?: Maybe<String>;
  totalDifficulty_contains?: Maybe<String>;
  totalDifficulty_not_contains?: Maybe<String>;
  totalDifficulty_starts_with?: Maybe<String>;
  totalDifficulty_not_starts_with?: Maybe<String>;
  totalDifficulty_ends_with?: Maybe<String>;
  totalDifficulty_not_ends_with?: Maybe<String>;
  extraData?: Maybe<String>;
  extraData_not?: Maybe<String>;
  extraData_in?: Maybe<String[] | String>;
  extraData_not_in?: Maybe<String[] | String>;
  extraData_lt?: Maybe<String>;
  extraData_lte?: Maybe<String>;
  extraData_gt?: Maybe<String>;
  extraData_gte?: Maybe<String>;
  extraData_contains?: Maybe<String>;
  extraData_not_contains?: Maybe<String>;
  extraData_starts_with?: Maybe<String>;
  extraData_not_starts_with?: Maybe<String>;
  extraData_ends_with?: Maybe<String>;
  extraData_not_ends_with?: Maybe<String>;
  size?: Maybe<Int>;
  size_not?: Maybe<Int>;
  size_in?: Maybe<Int[] | Int>;
  size_not_in?: Maybe<Int[] | Int>;
  size_lt?: Maybe<Int>;
  size_lte?: Maybe<Int>;
  size_gt?: Maybe<Int>;
  size_gte?: Maybe<Int>;
  gasLimit?: Maybe<Int>;
  gasLimit_not?: Maybe<Int>;
  gasLimit_in?: Maybe<Int[] | Int>;
  gasLimit_not_in?: Maybe<Int[] | Int>;
  gasLimit_lt?: Maybe<Int>;
  gasLimit_lte?: Maybe<Int>;
  gasLimit_gt?: Maybe<Int>;
  gasLimit_gte?: Maybe<Int>;
  gasUsed?: Maybe<Int>;
  gasUsed_not?: Maybe<Int>;
  gasUsed_in?: Maybe<Int[] | Int>;
  gasUsed_not_in?: Maybe<Int[] | Int>;
  gasUsed_lt?: Maybe<Int>;
  gasUsed_lte?: Maybe<Int>;
  gasUsed_gt?: Maybe<Int>;
  gasUsed_gte?: Maybe<Int>;
  timestamp?: Maybe<Int>;
  timestamp_not?: Maybe<Int>;
  timestamp_in?: Maybe<Int[] | Int>;
  timestamp_not_in?: Maybe<Int[] | Int>;
  timestamp_lt?: Maybe<Int>;
  timestamp_lte?: Maybe<Int>;
  timestamp_gt?: Maybe<Int>;
  timestamp_gte?: Maybe<Int>;
  transactions_every?: Maybe<TransactionWhereInput>;
  transactions_some?: Maybe<TransactionWhereInput>;
  transactions_none?: Maybe<TransactionWhereInput>;
  AND?: Maybe<BlockWhereInput[] | BlockWhereInput>;
  OR?: Maybe<BlockWhereInput[] | BlockWhereInput>;
  NOT?: Maybe<BlockWhereInput[] | BlockWhereInput>;
}

export type TransactionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BlockCreateInput {
  id?: Maybe<ID_Input>;
  number: Int;
  hash: String;
  parentHash: String;
  baseFeePerGas?: Maybe<Int>;
  nonce: String;
  sha3Uncles?: Maybe<String>;
  logsBloom?: Maybe<String>;
  transactionRoot?: Maybe<String>;
  stateRoot?: Maybe<String>;
  miner: String;
  difficulty: String;
  totalDifficulty: String;
  extraData?: Maybe<String>;
  size?: Maybe<Int>;
  gasLimit?: Maybe<Int>;
  gasUsed?: Maybe<Int>;
  timestamp: Int;
  transactions?: Maybe<TransactionCreateManyInput>;
  uncles?: Maybe<BlockCreateunclesInput>;
}

export interface TransactionCreateManyInput {
  create?: Maybe<TransactionCreateInput[] | TransactionCreateInput>;
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
}

export interface TransactionCreateInput {
  id?: Maybe<ID_Input>;
  hash: String;
  nonce: Int;
  blockHash: String;
  blockNumber: Int;
  transactionIndex: Int;
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gas?: Maybe<Int>;
  input?: Maybe<String>;
}

export interface BlockCreateunclesInput {
  set?: Maybe<String[] | String>;
}

export interface BlockUpdateInput {
  number?: Maybe<Int>;
  hash?: Maybe<String>;
  parentHash?: Maybe<String>;
  baseFeePerGas?: Maybe<Int>;
  nonce?: Maybe<String>;
  sha3Uncles?: Maybe<String>;
  logsBloom?: Maybe<String>;
  transactionRoot?: Maybe<String>;
  stateRoot?: Maybe<String>;
  miner?: Maybe<String>;
  difficulty?: Maybe<String>;
  totalDifficulty?: Maybe<String>;
  extraData?: Maybe<String>;
  size?: Maybe<Int>;
  gasLimit?: Maybe<Int>;
  gasUsed?: Maybe<Int>;
  timestamp?: Maybe<Int>;
  transactions?: Maybe<TransactionUpdateManyInput>;
  uncles?: Maybe<BlockUpdateunclesInput>;
}

export interface TransactionUpdateManyInput {
  create?: Maybe<TransactionCreateInput[] | TransactionCreateInput>;
  update?: Maybe<
    | TransactionUpdateWithWhereUniqueNestedInput[]
    | TransactionUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TransactionUpsertWithWhereUniqueNestedInput[]
    | TransactionUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  connect?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  set?: Maybe<TransactionWhereUniqueInput[] | TransactionWhereUniqueInput>;
  disconnect?: Maybe<
    TransactionWhereUniqueInput[] | TransactionWhereUniqueInput
  >;
  deleteMany?: Maybe<
    TransactionScalarWhereInput[] | TransactionScalarWhereInput
  >;
  updateMany?: Maybe<
    | TransactionUpdateManyWithWhereNestedInput[]
    | TransactionUpdateManyWithWhereNestedInput
  >;
}

export interface TransactionUpdateWithWhereUniqueNestedInput {
  where: TransactionWhereUniqueInput;
  data: TransactionUpdateDataInput;
}

export interface TransactionUpdateDataInput {
  hash?: Maybe<String>;
  nonce?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gas?: Maybe<Int>;
  input?: Maybe<String>;
}

export interface TransactionUpsertWithWhereUniqueNestedInput {
  where: TransactionWhereUniqueInput;
  update: TransactionUpdateDataInput;
  create: TransactionCreateInput;
}

export interface TransactionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  nonce?: Maybe<Int>;
  nonce_not?: Maybe<Int>;
  nonce_in?: Maybe<Int[] | Int>;
  nonce_not_in?: Maybe<Int[] | Int>;
  nonce_lt?: Maybe<Int>;
  nonce_lte?: Maybe<Int>;
  nonce_gt?: Maybe<Int>;
  nonce_gte?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockHash_not?: Maybe<String>;
  blockHash_in?: Maybe<String[] | String>;
  blockHash_not_in?: Maybe<String[] | String>;
  blockHash_lt?: Maybe<String>;
  blockHash_lte?: Maybe<String>;
  blockHash_gt?: Maybe<String>;
  blockHash_gte?: Maybe<String>;
  blockHash_contains?: Maybe<String>;
  blockHash_not_contains?: Maybe<String>;
  blockHash_starts_with?: Maybe<String>;
  blockHash_not_starts_with?: Maybe<String>;
  blockHash_ends_with?: Maybe<String>;
  blockHash_not_ends_with?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  blockNumber_not?: Maybe<Int>;
  blockNumber_in?: Maybe<Int[] | Int>;
  blockNumber_not_in?: Maybe<Int[] | Int>;
  blockNumber_lt?: Maybe<Int>;
  blockNumber_lte?: Maybe<Int>;
  blockNumber_gt?: Maybe<Int>;
  blockNumber_gte?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  transactionIndex_not?: Maybe<Int>;
  transactionIndex_in?: Maybe<Int[] | Int>;
  transactionIndex_not_in?: Maybe<Int[] | Int>;
  transactionIndex_lt?: Maybe<Int>;
  transactionIndex_lte?: Maybe<Int>;
  transactionIndex_gt?: Maybe<Int>;
  transactionIndex_gte?: Maybe<Int>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gasPrice_not?: Maybe<String>;
  gasPrice_in?: Maybe<String[] | String>;
  gasPrice_not_in?: Maybe<String[] | String>;
  gasPrice_lt?: Maybe<String>;
  gasPrice_lte?: Maybe<String>;
  gasPrice_gt?: Maybe<String>;
  gasPrice_gte?: Maybe<String>;
  gasPrice_contains?: Maybe<String>;
  gasPrice_not_contains?: Maybe<String>;
  gasPrice_starts_with?: Maybe<String>;
  gasPrice_not_starts_with?: Maybe<String>;
  gasPrice_ends_with?: Maybe<String>;
  gasPrice_not_ends_with?: Maybe<String>;
  gas?: Maybe<Int>;
  gas_not?: Maybe<Int>;
  gas_in?: Maybe<Int[] | Int>;
  gas_not_in?: Maybe<Int[] | Int>;
  gas_lt?: Maybe<Int>;
  gas_lte?: Maybe<Int>;
  gas_gt?: Maybe<Int>;
  gas_gte?: Maybe<Int>;
  input?: Maybe<String>;
  input_not?: Maybe<String>;
  input_in?: Maybe<String[] | String>;
  input_not_in?: Maybe<String[] | String>;
  input_lt?: Maybe<String>;
  input_lte?: Maybe<String>;
  input_gt?: Maybe<String>;
  input_gte?: Maybe<String>;
  input_contains?: Maybe<String>;
  input_not_contains?: Maybe<String>;
  input_starts_with?: Maybe<String>;
  input_not_starts_with?: Maybe<String>;
  input_ends_with?: Maybe<String>;
  input_not_ends_with?: Maybe<String>;
  AND?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
  OR?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
  NOT?: Maybe<TransactionScalarWhereInput[] | TransactionScalarWhereInput>;
}

export interface TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput;
  data: TransactionUpdateManyDataInput;
}

export interface TransactionUpdateManyDataInput {
  hash?: Maybe<String>;
  nonce?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gas?: Maybe<Int>;
  input?: Maybe<String>;
}

export interface BlockUpdateunclesInput {
  set?: Maybe<String[] | String>;
}

export interface BlockUpdateManyMutationInput {
  number?: Maybe<Int>;
  hash?: Maybe<String>;
  parentHash?: Maybe<String>;
  baseFeePerGas?: Maybe<Int>;
  nonce?: Maybe<String>;
  sha3Uncles?: Maybe<String>;
  logsBloom?: Maybe<String>;
  transactionRoot?: Maybe<String>;
  stateRoot?: Maybe<String>;
  miner?: Maybe<String>;
  difficulty?: Maybe<String>;
  totalDifficulty?: Maybe<String>;
  extraData?: Maybe<String>;
  size?: Maybe<Int>;
  gasLimit?: Maybe<Int>;
  gasUsed?: Maybe<Int>;
  timestamp?: Maybe<Int>;
  uncles?: Maybe<BlockUpdateunclesInput>;
}

export interface TransactionUpdateInput {
  hash?: Maybe<String>;
  nonce?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gas?: Maybe<Int>;
  input?: Maybe<String>;
}

export interface TransactionUpdateManyMutationInput {
  hash?: Maybe<String>;
  nonce?: Maybe<Int>;
  blockHash?: Maybe<String>;
  blockNumber?: Maybe<Int>;
  transactionIndex?: Maybe<Int>;
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  gasPrice?: Maybe<String>;
  gas?: Maybe<Int>;
  input?: Maybe<String>;
}

export interface BlockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlockWhereInput>;
  AND?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
  OR?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
  NOT?: Maybe<BlockSubscriptionWhereInput[] | BlockSubscriptionWhereInput>;
}

export interface TransactionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TransactionWhereInput>;
  AND?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  OR?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TransactionSubscriptionWhereInput[] | TransactionSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Block {
  id: ID_Output;
  number: Int;
  hash: String;
  parentHash: String;
  baseFeePerGas?: Int;
  nonce: String;
  sha3Uncles?: String;
  logsBloom?: String;
  transactionRoot?: String;
  stateRoot?: String;
  miner: String;
  difficulty: String;
  totalDifficulty: String;
  extraData?: String;
  size?: Int;
  gasLimit?: Int;
  gasUsed?: Int;
  timestamp: Int;
  uncles: String[];
}

export interface BlockPromise extends Promise<Block>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  hash: () => Promise<String>;
  parentHash: () => Promise<String>;
  baseFeePerGas: () => Promise<Int>;
  nonce: () => Promise<String>;
  sha3Uncles: () => Promise<String>;
  logsBloom: () => Promise<String>;
  transactionRoot: () => Promise<String>;
  stateRoot: () => Promise<String>;
  miner: () => Promise<String>;
  difficulty: () => Promise<String>;
  totalDifficulty: () => Promise<String>;
  extraData: () => Promise<String>;
  size: () => Promise<Int>;
  gasLimit: () => Promise<Int>;
  gasUsed: () => Promise<Int>;
  timestamp: () => Promise<Int>;
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uncles: () => Promise<String[]>;
}

export interface BlockSubscription
  extends Promise<AsyncIterator<Block>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  hash: () => Promise<AsyncIterator<String>>;
  parentHash: () => Promise<AsyncIterator<String>>;
  baseFeePerGas: () => Promise<AsyncIterator<Int>>;
  nonce: () => Promise<AsyncIterator<String>>;
  sha3Uncles: () => Promise<AsyncIterator<String>>;
  logsBloom: () => Promise<AsyncIterator<String>>;
  transactionRoot: () => Promise<AsyncIterator<String>>;
  stateRoot: () => Promise<AsyncIterator<String>>;
  miner: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<String>>;
  totalDifficulty: () => Promise<AsyncIterator<String>>;
  extraData: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  gasLimit: () => Promise<AsyncIterator<Int>>;
  gasUsed: () => Promise<AsyncIterator<Int>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  transactions: <T = Promise<AsyncIterator<TransactionSubscription>>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uncles: () => Promise<AsyncIterator<String[]>>;
}

export interface BlockNullablePromise
  extends Promise<Block | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  hash: () => Promise<String>;
  parentHash: () => Promise<String>;
  baseFeePerGas: () => Promise<Int>;
  nonce: () => Promise<String>;
  sha3Uncles: () => Promise<String>;
  logsBloom: () => Promise<String>;
  transactionRoot: () => Promise<String>;
  stateRoot: () => Promise<String>;
  miner: () => Promise<String>;
  difficulty: () => Promise<String>;
  totalDifficulty: () => Promise<String>;
  extraData: () => Promise<String>;
  size: () => Promise<Int>;
  gasLimit: () => Promise<Int>;
  gasUsed: () => Promise<Int>;
  timestamp: () => Promise<Int>;
  transactions: <T = FragmentableArray<Transaction>>(args?: {
    where?: TransactionWhereInput;
    orderBy?: TransactionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  uncles: () => Promise<String[]>;
}

export interface Transaction {
  id: ID_Output;
  hash: String;
  nonce: Int;
  blockHash: String;
  blockNumber: Int;
  transactionIndex: Int;
  from?: String;
  to?: String;
  value?: String;
  gasPrice?: String;
  gas?: Int;
  input?: String;
}

export interface TransactionPromise extends Promise<Transaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  nonce: () => Promise<Int>;
  blockHash: () => Promise<String>;
  blockNumber: () => Promise<Int>;
  transactionIndex: () => Promise<Int>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  gasPrice: () => Promise<String>;
  gas: () => Promise<Int>;
  input: () => Promise<String>;
}

export interface TransactionSubscription
  extends Promise<AsyncIterator<Transaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
  nonce: () => Promise<AsyncIterator<Int>>;
  blockHash: () => Promise<AsyncIterator<String>>;
  blockNumber: () => Promise<AsyncIterator<Int>>;
  transactionIndex: () => Promise<AsyncIterator<Int>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  gasPrice: () => Promise<AsyncIterator<String>>;
  gas: () => Promise<AsyncIterator<Int>>;
  input: () => Promise<AsyncIterator<String>>;
}

export interface TransactionNullablePromise
  extends Promise<Transaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  nonce: () => Promise<Int>;
  blockHash: () => Promise<String>;
  blockNumber: () => Promise<Int>;
  transactionIndex: () => Promise<Int>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  gasPrice: () => Promise<String>;
  gas: () => Promise<Int>;
  input: () => Promise<String>;
}

export interface BlockConnection {
  pageInfo: PageInfo;
  edges: BlockEdge[];
}

export interface BlockConnectionPromise
  extends Promise<BlockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlockEdge>>() => T;
  aggregate: <T = AggregateBlockPromise>() => T;
}

export interface BlockConnectionSubscription
  extends Promise<AsyncIterator<BlockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlockSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BlockEdge {
  node: Block;
  cursor: String;
}

export interface BlockEdgePromise extends Promise<BlockEdge>, Fragmentable {
  node: <T = BlockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlockEdgeSubscription
  extends Promise<AsyncIterator<BlockEdge>>,
    Fragmentable {
  node: <T = BlockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlock {
  count: Int;
}

export interface AggregateBlockPromise
  extends Promise<AggregateBlock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlockSubscription
  extends Promise<AsyncIterator<AggregateBlock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TransactionConnection {
  pageInfo: PageInfo;
  edges: TransactionEdge[];
}

export interface TransactionConnectionPromise
  extends Promise<TransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionEdge>>() => T;
  aggregate: <T = AggregateTransactionPromise>() => T;
}

export interface TransactionConnectionSubscription
  extends Promise<AsyncIterator<TransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionSubscription>() => T;
}

export interface TransactionEdge {
  node: Transaction;
  cursor: String;
}

export interface TransactionEdgePromise
  extends Promise<TransactionEdge>,
    Fragmentable {
  node: <T = TransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionEdgeSubscription
  extends Promise<AsyncIterator<TransactionEdge>>,
    Fragmentable {
  node: <T = TransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTransaction {
  count: Int;
}

export interface AggregateTransactionPromise
  extends Promise<AggregateTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionSubscription
  extends Promise<AsyncIterator<AggregateTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BlockSubscriptionPayload {
  mutation: MutationType;
  node: Block;
  updatedFields: String[];
  previousValues: BlockPreviousValues;
}

export interface BlockSubscriptionPayloadPromise
  extends Promise<BlockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlockPreviousValuesPromise>() => T;
}

export interface BlockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlockPreviousValuesSubscription>() => T;
}

export interface BlockPreviousValues {
  id: ID_Output;
  number: Int;
  hash: String;
  parentHash: String;
  baseFeePerGas?: Int;
  nonce: String;
  sha3Uncles?: String;
  logsBloom?: String;
  transactionRoot?: String;
  stateRoot?: String;
  miner: String;
  difficulty: String;
  totalDifficulty: String;
  extraData?: String;
  size?: Int;
  gasLimit?: Int;
  gasUsed?: Int;
  timestamp: Int;
  uncles: String[];
}

export interface BlockPreviousValuesPromise
  extends Promise<BlockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  hash: () => Promise<String>;
  parentHash: () => Promise<String>;
  baseFeePerGas: () => Promise<Int>;
  nonce: () => Promise<String>;
  sha3Uncles: () => Promise<String>;
  logsBloom: () => Promise<String>;
  transactionRoot: () => Promise<String>;
  stateRoot: () => Promise<String>;
  miner: () => Promise<String>;
  difficulty: () => Promise<String>;
  totalDifficulty: () => Promise<String>;
  extraData: () => Promise<String>;
  size: () => Promise<Int>;
  gasLimit: () => Promise<Int>;
  gasUsed: () => Promise<Int>;
  timestamp: () => Promise<Int>;
  uncles: () => Promise<String[]>;
}

export interface BlockPreviousValuesSubscription
  extends Promise<AsyncIterator<BlockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  hash: () => Promise<AsyncIterator<String>>;
  parentHash: () => Promise<AsyncIterator<String>>;
  baseFeePerGas: () => Promise<AsyncIterator<Int>>;
  nonce: () => Promise<AsyncIterator<String>>;
  sha3Uncles: () => Promise<AsyncIterator<String>>;
  logsBloom: () => Promise<AsyncIterator<String>>;
  transactionRoot: () => Promise<AsyncIterator<String>>;
  stateRoot: () => Promise<AsyncIterator<String>>;
  miner: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<String>>;
  totalDifficulty: () => Promise<AsyncIterator<String>>;
  extraData: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  gasLimit: () => Promise<AsyncIterator<Int>>;
  gasUsed: () => Promise<AsyncIterator<Int>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
  uncles: () => Promise<AsyncIterator<String[]>>;
}

export interface TransactionSubscriptionPayload {
  mutation: MutationType;
  node: Transaction;
  updatedFields: String[];
  previousValues: TransactionPreviousValues;
}

export interface TransactionSubscriptionPayloadPromise
  extends Promise<TransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionPreviousValuesPromise>() => T;
}

export interface TransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionPreviousValuesSubscription>() => T;
}

export interface TransactionPreviousValues {
  id: ID_Output;
  hash: String;
  nonce: Int;
  blockHash: String;
  blockNumber: Int;
  transactionIndex: Int;
  from?: String;
  to?: String;
  value?: String;
  gasPrice?: String;
  gas?: Int;
  input?: String;
}

export interface TransactionPreviousValuesPromise
  extends Promise<TransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  nonce: () => Promise<Int>;
  blockHash: () => Promise<String>;
  blockNumber: () => Promise<Int>;
  transactionIndex: () => Promise<Int>;
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  gasPrice: () => Promise<String>;
  gas: () => Promise<Int>;
  input: () => Promise<String>;
}

export interface TransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
  nonce: () => Promise<AsyncIterator<Int>>;
  blockHash: () => Promise<AsyncIterator<String>>;
  blockNumber: () => Promise<AsyncIterator<Int>>;
  transactionIndex: () => Promise<AsyncIterator<Int>>;
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  gasPrice: () => Promise<AsyncIterator<String>>;
  gas: () => Promise<AsyncIterator<Int>>;
  input: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Block",
    embedded: false
  },
  {
    name: "Transaction",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
